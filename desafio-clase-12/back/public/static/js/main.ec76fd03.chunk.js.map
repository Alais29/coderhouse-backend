{"version":3,"sources":["components/ProductList/styles.module.scss","utilities/others.ts","components/ProductForm/ProductForm.tsx","components/ProductList/ProductList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","isEmpty","item","JSON","stringify","ProductForm","productos","setProductos","useState","show","text","alert","setAlert","title","price","thumbnail","formValues","setFormValues","handleChange","e","target","name","value","className","Form","onSubmit","preventDefault","socket","socketClient","emit","on","data","message","Group","controlId","Label","Control","type","onChange","Alert","variant","Button","ProductList","Table","striped","bordered","hover","map","producto","cx","styles","src","alt","id","App","useEffect","Container","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec76fd03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"product-img\":\"styles_product-img__21jtm\"};","export function isEmpty(item: any) {\r\n  if (!!item) {\r\n    switch (typeof item) {\r\n      case \"string\":\r\n        if (item !== \"\" && item !== \"null\" && item !== \"undefined\") {\r\n          return false;\r\n        }\r\n        return true;\r\n      case \"number\":\r\n        return false;\r\n      case \"object\":\r\n        if (JSON.stringify(item) === \"{}\" || JSON.stringify(item) === \"[]\") {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  return true;\r\n}\r\n","import React, { Dispatch, SetStateAction, useState } from 'react'\nimport { Alert, Button, Form } from 'react-bootstrap'\nimport { IItem, IAlert } from '../../commons/interfaces';\nimport { isEmpty } from '../../utilities/others'\n// import { saveProduct } from '../../services/Productos';\nimport socketClient  from \"socket.io-client\";\n\ninterface IProductForm {\n  setProductos: Dispatch<SetStateAction<IItem[]>>\n  productos: IItem[]\n}\n\nconst ProductForm = ({ productos, setProductos }: IProductForm) => {\n  const [alert, setAlert] = useState<IAlert>({show: false, text: ''})\n  const [formValues, setFormValues] = useState({\n    title: '',\n    price: '',\n    thumbnail: ''\n  });\n\n  const { title, price, thumbnail } = formValues\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormValues({\n      ...formValues,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const handleSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const {title, price, thumbnail} = formValues    \n    // saveProduct(formValues)\n    //   .then((newProduct) => {\n    //     setProductos([\n    //       ...productos,\n    //       newProduct\n    //     ])\n    //     setFormValues({ title: '', price: '', thumbnail: '' })\n    //     setAlert({show: false, text: ''})\n    //   })\n    //   .catch((e) => {\n    //     setAlert({ show: true, text: e.message })\n    //   })\n\n    const socket = socketClient('/');\n    if (isEmpty(title) || isEmpty(price) || isEmpty(thumbnail)) {\n      setAlert({ show: true, text: 'Todos los campos son requeridos' })\n    } else {\n      socket.emit('new product', formValues)\n      socket.on('success', () => {\n        setFormValues({ title: '', price: '', thumbnail: '' })\n      })\n    }\n    socket.on('productos', (productos: IItem[]) => {\n      setProductos(productos)\n      setAlert({ show: false, text: '' })\n    })\n    socket.on('productos error', (data) => {\n      setAlert({show: true, text: data.message})\n    });\n    socket.on('save producto error', (data) => {\n      setAlert({show: true, text: data.message})\n    });\n  }\n\n  return (\n    <>\n      <h1 className=\"text-center\">Agrega un producto</h1>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"title\">\n          <Form.Label>Nombre</Form.Label>\n          <Form.Control type=\"text\" value={title} name=\"title\" onChange={handleChange} />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"price\">\n          <Form.Label>Precio</Form.Label>\n          <Form.Control type=\"text\" value={price} name=\"price\" onChange={handleChange} />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"thumbnail\">\n          <Form.Label>URL de imagen</Form.Label>\n          <Form.Control type=\"url\" value={thumbnail} name=\"thumbnail\" onChange={handleChange} />\n        </Form.Group>\n        {alert.show && <Alert variant=\"danger\">{alert.text}</Alert>}\n        <Button type=\"submit\" className=\"mb-2\">\n          Guardar\n        </Button>\n      </Form>\n    </>\n  )\n}\n\nexport default ProductForm\n","import { Table } from 'react-bootstrap';\r\nimport { IItem } from '../../commons/interfaces';\r\nimport cx from 'classnames/bind'\r\nimport styles from './styles.module.scss'\r\n\r\ninterface IProductList {\r\n  productos: IItem[]\r\n}\r\n\r\nconst ProductList = ({ productos }: IProductList) => {\r\n  return (\r\n    <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n          <th>Nombre</th>\r\n          <th>Precio</th>\r\n          <th>Imagen</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {productos.map((producto: IItem) => (\r\n          <tr key={producto.id}>\r\n            <td>{producto.title}</td>\r\n            <td>{producto.price}</td>\r\n            <td>\r\n              <img className={cx(styles['product-img'])} src={producto.thumbnail} alt={producto.title} />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default ProductList","import { useState, useEffect } from 'react';\r\nimport socketClient  from \"socket.io-client\";\r\nimport { IItem, IAlert } from './commons/interfaces';\r\n// import { getProducts } from './services/Productos';\r\nimport { Alert, Container } from 'react-bootstrap';\r\nimport ProductForm from './components/ProductForm/ProductForm';\r\nimport ProductList from './components/ProductList/ProductList';\r\n\r\nconst App = () => {\r\n  const [productos, setProductos] = useState<IItem[] | []>([])\r\n  const [alert, setAlert] = useState<IAlert>({ show: false, text: '' })\r\n  \r\n  useEffect(() => {\r\n    // getProducts()\r\n    // .then(products => {\r\n    //   setProductos(products)\r\n    //   setAlert({ show: false, text: '' })\r\n    // })\r\n    // .catch((e) => {\r\n    //   setAlert({show: true, text: e.message})\r\n    // })\r\n    const socket = socketClient('/');\r\n    socket.on('productos', (data) => {\r\n      setProductos(data)\r\n      setAlert({show: false, text: ''})\r\n    });\r\n    socket.on('productos error', (data) => {\r\n      setAlert({show: true, text: data.message})\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <Container>\r\n        <ProductForm productos={productos} setProductos={setProductos} />\r\n        {productos.length !== 0\r\n          ? <ProductList productos={productos} />\r\n          : alert.show && <Alert variant='danger'>{alert.text}</Alert>\r\n        }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}