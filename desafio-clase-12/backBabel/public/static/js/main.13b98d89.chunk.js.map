{"version":3,"sources":["components/ChatChannel/styles.module.scss","components/ProductList/styles.module.scss","services/socket.ts","utilities/others.ts","components/ProductForm/ProductForm.tsx","components/ProductList/ProductList.tsx","components/ChatChannel/ChatChannel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","socket","socketClient","isEmpty","item","JSON","stringify","ProductForm","productos","setProductos","useState","show","text","alert","setAlert","title","price","thumbnail","formValues","setFormValues","handleChange","e","target","name","value","className","Form","onSubmit","preventDefault","emit","on","data","message","Group","controlId","Label","Control","type","onChange","Alert","variant","Button","ProductList","Table","striped","bordered","hover","map","producto","cx","styles","src","alt","id","ChatChannel","email","messages","setMessages","emailRef","useRef","useEffect","msg","index","date","current","disabled","placeholder","ref","App","disconnect","Container","Row","Col","lg","sm","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13b98d89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat-channel\":\"styles_chat-channel__3kc8J\",\"chat-channel__messages\":\"styles_chat-channel__messages__Naigt\",\"chat-channel__message\":\"styles_chat-channel__message__3S3Et\",\"chat-channel__message-email\":\"styles_chat-channel__message-email__3KCAX\",\"chat-channel__message-text\":\"styles_chat-channel__message-text__2sWmS\",\"chat-channel__message-date\":\"styles_chat-channel__message-date__3Ldd4\",\"chat-channel__form\":\"styles_chat-channel__form__128TP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"product-img\":\"styles_product-img__21jtm\"};","import socketClient from \"socket.io-client\";\r\n\r\nexport const socket = socketClient(\"/\");\r\n","export function isEmpty(item: any) {\r\n  if (!!item) {\r\n    switch (typeof item) {\r\n      case \"string\":\r\n        if (item !== \"\" && item !== \"null\" && item !== \"undefined\") {\r\n          return false;\r\n        }\r\n        return true;\r\n      case \"number\":\r\n        return false;\r\n      case \"object\":\r\n        if (JSON.stringify(item) === \"{}\" || JSON.stringify(item) === \"[]\") {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  return true;\r\n}\r\n","import React, { Dispatch, SetStateAction, useState } from 'react'\r\nimport { Alert, Button, Form } from 'react-bootstrap'\r\nimport { IItem, IAlert } from '../../commons/interfaces';\r\nimport { isEmpty } from '../../utilities/others'\r\nimport { socket } from '../../services/socket';\r\n// import { saveProduct } from '../../services/Productos';\r\n\r\ninterface IProductForm {\r\n  setProductos: Dispatch<SetStateAction<IItem[]>>\r\n  productos: IItem[]\r\n}\r\n\r\nconst ProductForm = ({ productos, setProductos }: IProductForm) => {\r\n  const [alert, setAlert] = useState<IAlert>({show: false, text: ''})\r\n  const [formValues, setFormValues] = useState({\r\n    title: '',\r\n    price: '',\r\n    thumbnail: ''\r\n  });\r\n\r\n  const { title, price, thumbnail } = formValues\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    // saveProduct(formValues)\r\n    //   .then((newProduct) => {\r\n    //     setProductos([\r\n    //       ...productos,\r\n    //       newProduct\r\n    //     ])\r\n    //     setFormValues({ title: '', price: '', thumbnail: '' })\r\n    //     setAlert({show: false, text: ''})\r\n    //   })\r\n    //   .catch((e) => {\r\n    //     setAlert({ show: true, text: e.message })\r\n    //   })\r\n\r\n    if (isEmpty(title) || isEmpty(price) || isEmpty(thumbnail)) {\r\n      setAlert({ show: true, text: 'Todos los campos son requeridos' })\r\n    } else {\r\n      setAlert({ show: false, text: '' })\r\n      socket.emit('new product', formValues)\r\n      socket.on('save product success', () => {\r\n        setFormValues({ title: '', price: '', thumbnail: '' })\r\n      })\r\n      socket.on('productos', (productos: IItem[]) => {\r\n        setProductos(productos)\r\n      })\r\n      socket.on('productos error', (data) => {\r\n        setAlert({show: true, text: data.message})\r\n      });\r\n      socket.on('save producto error', (data) => {\r\n        setAlert({show: true, text: data.message})\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"text-center\">Agrega un producto</h1>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"mb-3\" controlId=\"title\">\r\n          <Form.Label>Nombre</Form.Label>\r\n          <Form.Control type=\"text\" value={title} name=\"title\" onChange={handleChange} />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"price\">\r\n          <Form.Label>Precio</Form.Label>\r\n          <Form.Control type=\"text\" value={price} name=\"price\" onChange={handleChange} />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"thumbnail\">\r\n          <Form.Label>URL de imagen</Form.Label>\r\n          <Form.Control type=\"url\" value={thumbnail} name=\"thumbnail\" onChange={handleChange} />\r\n        </Form.Group>\r\n        {alert.show && <Alert variant=\"danger\">{alert.text}</Alert>}\r\n        <Button type=\"submit\" className=\"mb-2\">\r\n          Guardar\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductForm\r\n","import { Table } from 'react-bootstrap';\r\nimport { IItem } from '../../commons/interfaces';\r\nimport cx from 'classnames/bind'\r\nimport styles from './styles.module.scss'\r\n\r\ninterface IProductList {\r\n  productos: IItem[]\r\n}\r\n\r\nconst ProductList = ({ productos }: IProductList) => {\r\n  return (\r\n    <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n          <th>Nombre</th>\r\n          <th>Precio</th>\r\n          <th>Imagen</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {productos.map((producto: IItem) => (\r\n          <tr key={producto.id}>\r\n            <td>{producto.title}</td>\r\n            <td>{producto.price}</td>\r\n            <td>\r\n              <img className={cx(styles['product-img'])} src={producto.thumbnail} alt={producto.title} />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default ProductList","import { useEffect, useRef, useState } from 'react';\r\nimport { socket } from '../../services/socket'\r\nimport { isEmpty } from '../../utilities/others';\r\nimport { IAlert } from '../../commons/interfaces';\r\nimport { Alert, Button, Form } from 'react-bootstrap'\r\nimport cx from 'classnames/bind'\r\nimport styles from './styles.module.scss'\r\n\r\ninterface IMessage {\r\n  email: string\r\n  text: string\r\n  date: string\r\n}\r\n\r\n//TODO agregar validación al mail\r\nconst ChatChannel = () => {\r\n  const [formValues, setFormValues] = useState({\r\n    email: '',\r\n    text: ''\r\n  });\r\n  const [messages, setMessages] = useState<IMessage[]>([])\r\n  const [alert, setAlert] = useState<IAlert>({ show: false, text: '' })\r\n  const {email, text} = formValues\r\n  const emailRef = useRef<HTMLInputElement>(null)\r\n\r\n  useEffect(() => {\r\n    socket.on('messages', (data) => {\r\n      setMessages(data)\r\n    })\r\n  }, [])\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n\r\n    if (isEmpty(email) || isEmpty(text)) {\r\n      setAlert({show: true, text: 'Ambos campos son obligatorios'})\r\n    } else {\r\n      setAlert({show: false, text: ''})\r\n      socket.emit('new message', formValues)\r\n      socket.on('save message success', () => {\r\n        setFormValues({\r\n          ...formValues,\r\n          text: ''\r\n        })\r\n      })\r\n      socket.on('messages', (data) => {\r\n        setMessages(data)\r\n        if (emailRef.current) {\r\n          emailRef.current.disabled = true;\r\n        }\r\n      })\r\n      socket.on('messages error', (data) => {\r\n        setAlert({show: true, text: data.message})\r\n      })\r\n      socket.on('save message error', (data) => {\r\n        setAlert({show: true, text: data.message})\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cx(styles['chat-channel'])}>\r\n      <h1>Centro de Mensajes</h1>\r\n      <div className={cx(styles['chat-channel__messages'])}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={cx(styles['chat-channel__message'])}>\r\n            <p>\r\n              <span className={cx(styles['chat-channel__message-email'])}>{msg.email}: </span>\r\n              <span className={cx(styles['chat-channel__message-text'])}>{msg.text}</span>\r\n            </p>\r\n            <small className={cx(styles['chat-channel__message-date'])}>{msg.date}</small>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <div className={cx(styles['chat-channel__form'])}>\r\n          <Form.Control value={email} onChange={handleChange} name=\"email\" type=\"text\" placeholder=\"Email\" ref={emailRef} />\r\n          <Form.Control value={text} onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Ingresa un mensaje\" />\r\n          <Button className=\"w-100\" variant=\"primary\" type=\"submit\">Enviar</Button>\r\n        </div>\r\n      </Form>\r\n      {alert.show &&\r\n        <Alert variant=\"warning\" className=\"mt-3\">{alert.text}</Alert>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatChannel\r\n","import { useState, useEffect } from 'react';\r\nimport { socket } from './services/socket';\r\nimport { IItem, IAlert } from './commons/interfaces';\r\n// import { getProducts } from './services/Productos';\r\nimport { Alert, Col, Container, Row } from 'react-bootstrap';\r\nimport ProductForm from './components/ProductForm/ProductForm';\r\nimport ProductList from './components/ProductList/ProductList';\r\nimport ChatChannel from './components/ChatChannel/ChatChannel';\r\n\r\nconst App = () => {\r\n  const [productos, setProductos] = useState<IItem[] | []>([])\r\n  const [alert, setAlert] = useState<IAlert>({ show: false, text: '' })\r\n  \r\n  useEffect(() => {\r\n    // getProducts()\r\n    // .then(products => {\r\n    //   setProductos(products)\r\n    //   setAlert({ show: false, text: '' })\r\n    // })\r\n    // .catch((e) => {\r\n    //   setAlert({show: true, text: e.message})\r\n    // })\r\n    socket.on('productos', (data) => {\r\n      setProductos(data)\r\n      setAlert({show: false, text: ''})\r\n    });\r\n    socket.on('productos error', (data) => {\r\n      setAlert({show: true, text: data.message})\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg=\"8\" sm=\"12\">\r\n          <ProductForm productos={productos} setProductos={setProductos} />\r\n          {productos.length !== 0\r\n            ? <ProductList productos={productos} />\r\n            : alert.show && <Alert variant='danger'>{alert.text}</Alert>\r\n          }\r\n        </Col>\r\n        <Col lg=\"4\" sm=\"12\">\r\n          <ChatChannel />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}